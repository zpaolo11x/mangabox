name: Build and Release Electron App

on:
  push:
    branches:
      - main
      - devtest

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
            name: macOS-x64
          - os: macos-latest
            arch: arm64
            name: macOS-arm64
          - os: ubuntu-latest
            arch: x64
            name: Linux
          - os: windows-latest
            arch: x64
            name: Windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Get version from package.json
        id: version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_ENV
        shell: bash

      - name: Build the app
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            npm run build -- --mac --${{ matrix.arch }}
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            npm run build -- --linux
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run build -- --win
          fi
        shell: bash
        if: matrix.os != 'windows-latest'

      - name: Build the app (Windows)
        run: npm run build -- --win
        shell: pwsh
        if: matrix.os == 'windows-latest'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-${{ matrix.name }}-${{ env.version }}
          path: |
            dist/*.dmg
            dist/*.AppImage
            dist/*.exe

  release:
    needs: build
    if: github.ref_name == 'devtest' # Run this job only for the 'main' branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_ENV
        shell: bash

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a v${{ env.version }} -m "Release v${{ env.version }}"
          git push origin v${{ env.version }}

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

