name: Build and Release Electron App

on:
  push:
    branches:
      - main
      - devtest
      - devtest_*
    paths-ignore:
      - 'docs/**'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - id: get_version
        run: |
          VERSION=$(node -p 'require("./package.json").version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: version
    runs-on: ${{ matrix.os }}
    env: 
      version: ${{ needs.version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            sys: mac
            arch: x64
            name: macOS-x64
          - os: macos-latest
            sys: mac
            arch: arm64
            name: macOS-arm64
          - os: ubuntu-latest
            sys: linux
            arch: x64
            name: Linux
          - os: windows-latest
            sys: win
            arch: x64
            name: Windows-x86
          - os: windows-latest
            sys: win
            arch: arm64
            name: Windows-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild -f -w keytar

      - name: Build the app
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --${{ matrix.sys }} --${{ matrix.arch }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-${{ matrix.name }}-${{ env.version }}
          path: |
            dist/*.dmg
            dist/*.AppImage
            dist/*.exe
  web:
    needs: version
    runs-on: ubuntu-latest
    env: 
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare web artifact (rsync version)
        run: |
          mkdir -p webdeploy/mangabox
          rsync -av --exclude='.*' \
                    --exclude='*.yml' \
                    --exclude='package*.*' \
                    --exclude='electron/' \
                    --exclude='assets/' \
                    --exclude='z_*.*' \
                    --exclude='docs/' \
                    ./ webdeploy/mangabox

      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: webdeploy/

  android:
    needs: [version, web]
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download webdeploy artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: dist

      - name: Install dependencies
        run: npm install
        
      - name: Install Capacitor HTTP plugin
        run: npm install @capacitor-community/http

      - name: Install Secure Storage plugin
        run: npm install capacitor-secure-storage-plugin

      - name: Add Android platform
        run: npx cap add android

      - name: Copy capacitor.js manually
        run: cp node_modules/@capacitor/core/dist/capacitor.js dist/mangabox/capacitor.js

      - name: Capacitor sync
        run: npx cap sync android

      - name: Debug Check copied assets
        run: ls -lR android/app/src/main/assets/public/

      - name: Build APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Check for APK output
        run: |
          find android/app/build/outputs/ -type f

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-Android-${{ env.version }}
          path: android/app/build/outputs/apk/debug/app-debug.apk

  release:
    needs: [build, web, version]
    env:
      version: ${{ needs.version.outputs.version }}
    if: github.ref_name == 'main' # Run this job only for the 'main' branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read "whatsnew.txt"
        id: read_whatsnew
        run: |
          if [ -f whatsnew.txt ]; then
            whatsNew=$(cat whatsnew.txt)
            echo "whatsNew<<EOF" >> $GITHUB_ENV
            echo "$whatsNew" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Error: 'whatsnew.txt' not found!"
            exit 1
          fi

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a v${{ env.version }} -m "Release v${{ env.version }}"
          git push origin v${{ env.version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: webdeploy

      - name: List dist directory contents
        run: ls -lR dist/

      - name: List webdeploy directory contents
        run: ls -lR webdeploy/

      - name: Zip web folder
        run: |
          cd webdeploy
          zip -r MangaBox-${{ env.version }}-Web.zip mangabox

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            dist/*/*
            webdeploy/MangaBox-${{ env.version }}-Web.zip
          body: ${{ env.whatsNew }}
          token: ${{ secrets.GITHUB_TOKEN }}

