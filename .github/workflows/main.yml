name: Build and Release Electron App

on:
  push:
    branches:
      - main
      - devtest

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build for macOS (x86)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --mac --x64

      - name: Upload macOS x86 DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-x86
          path: dist/*x64.dmg

      - name: Build for macOS (ARM)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --mac --arm64

      - name: Upload macOS ARM DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-arm64
          path: dist/*arm64.dmg

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build for Windows
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --win --x64

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: dist/*.exe

  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build for Linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: dist/*.AppImage

  release:
    runs-on: ubuntu-latest
    needs: [macos, windows, linux]  # Ensure the build jobs are completed before creating a release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Authenticate with GitHub CLI
        run: echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token

      - name: Create GitHub Release
        run: |
          VERSION=${{ github.ref_name }}  # This assumes the version is the tag, e.g., v3.0.0
          gh release create "$VERSION" dist/*.AppImage dist/*.exe dist/*x64.dmg dist/*arm64.dmg --title "Release $VERSION" --notes "Release notes for $VERSION" --target "$VERSION"

      - name: Upload release assets to GitHub
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.AppImage
          asset_name: MangaBox-linux.AppImage
          asset_content_type: application/octet-stream


