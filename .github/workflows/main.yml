name: Build and Release Web, Electron, Android

on:
  push:
    branches:
      - main
      - devtest
      - devtest_*
    paths-ignore:
      - 'docs/**'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - id: get_version
        run: |
          VERSION=$(node -p 'require("./package.json").version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  electron:
    needs: version
    runs-on: ${{ matrix.os }}
    env: 
      version: ${{ needs.version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            sys: mac
            arch: x64
            name: macOS-x64
          - os: macos-latest
            sys: mac
            arch: arm64
            name: macOS-arm64
          - os: ubuntu-latest
            sys: linux
            arch: x64
            name: Linux
          - os: windows-latest
            sys: win
            arch: x64
            name: Windows-x86
          - os: windows-latest
            sys: win
            arch: arm64
            name: Windows-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild -f -w keytar

      - name: Build the app
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build -- --${{ matrix.sys }} --${{ matrix.arch }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-${{ matrix.name }}-${{ env.version }}
          path: |
            dist/*.dmg
            dist/*.AppImage
            dist/*.exe
  web:
    needs: version
    runs-on: ubuntu-latest
    env: 
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare web artifact (rsync version)
        run: |
          mkdir -p webdeploy/mangabox
          rsync -av --exclude='.*' \
                    --exclude='*.yml' \
                    --exclude='package*.*' \
                    --exclude='electron/' \
                    --exclude='assets/' \
                    --exclude='z_*.*' \
                    --exclude='docs/' \
                    --exclude='capacitor*' \
                    ./ webdeploy/mangabox

      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: webdeploy/

  android:
    needs: [version, web]
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download webdeploy artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: dist

      - name: Install dependencies
        run: npm install

      - name: Add Android platform
        run: npx cap add android
      
      - name: Generate Android assets
        run: npx @capacitor/assets generate
            
      - name: Capacitor sync
        run: npx cap sync android

      - name: Copy custom styles.xml
        run: cp capacitor.styles.xml android/app/src/main/res/values/styles.xml

      - name: Build APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Check for APK output
        run: find android/app/build/outputs/ -type f

      - name: Rename APK with version
        run: |
          VERSION=$(jq -r .version capacitor.config.json)
          mv android/app/build/outputs/apk/debug/app-debug.apk \
            android/app/build/outputs/apk/debug/mangabox-${{ env.version }}-Android-debug.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-Android-${{ env.version }}
          path: android/app/build/outputs/apk/debug/mangabox-${{ env.version }}-Android-debug.apk
  ios:
    needs: [version, web]
    runs-on: macos-latest
    env:
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download webdeploy artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: dist

      - name: Install dependencies
        run: npm install

      - name: Add iOS platform
        run: npx cap add ios

      - name: Capacitor sync
        run: npx cap sync ios

      - name: Install CocoaPods dependencies
        run: |
          cd ios/App
          pod install --repo-update

      # ---- Copy AppIcon and clean build ----
      - name: Copy AppIcon set to iOS project
        run: |
          rm -rf ios/App/App/Assets.xcassets/AppIcon.appiconset
          cp -R assets/icons/AppIcon.appiconset ios/App/App/Assets.xcassets/

      - name: Clean previous build
        run: |
          cd ios/App
          xcodebuild clean -workspace App.xcworkspace -scheme App

      # ---- Build for iOS Simulator (universal x86_64 + arm64) ----
      - name: Build .app for Simulator (universal)
        run: |
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -sdk iphonesimulator \
            -arch x86_64 -arch arm64 \
            -derivedDataPath build \
            ONLY_ACTIVE_ARCH=NO

      - name: Upload .app artifact (Simulator)
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-iOS-${{ env.version }}-app
          path: ios/App/build/Build/Products/Debug-iphonesimulator/*.app

      # ---- Build for Real Device (.ipa, unsigned) ----
 
      - name: Build for device (.app)
        run: |
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=NO \
            archive \
            -archivePath $PWD/build/App.xcarchive

      - name: Package unsigned .ipa
        run: |
          cd ios/App/build/App.xcarchive/Products/Applications
          mkdir -p ../../export
          mkdir -p Payload
          cp -R App.app Payload/
          zip -r ../../export/mangabox-${{ env.version }}.ipa Payload



#      - name: Build for device
#        run: |
#          cd ios/App
#          xcodebuild \
#            -workspace App.xcworkspace \
#            -scheme App \
#            -configuration Release \
#            -sdk iphoneos \
#            -derivedDataPath build \
#            CODE_SIGN_IDENTITY="" \
#            CODE_SIGNING_REQUIRED=NO \
#            ONLY_ACTIVE_ARCH=NO \
#            -archivePath $PWD/build/App.xcarchive \
#            archive

#      - name: Export .ipa
#        run: |
#          cd ios/App
#          mkdir -p export
#          xcodebuild -exportArchive \
#            -archivePath build/App.xcarchive \
#            -exportPath export \
#            -exportOptionsPlist ../../exportOptions.plist


      - name: Upload .ipa artifact (Device)
        uses: actions/upload-artifact@v4
        with:
          name: MangaBox-iOS-${{ env.version }}-ipa
          path: ios/App/build/App.xcarchive/export/*.ipa



  release:
    needs: [electron, web, android, version]
    env:
      version: ${{ needs.version.outputs.version }}
    if: github.ref_name == 'main' # Run this job only for the 'main' branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read "whatsnew.txt"
        id: read_whatsnew
        run: |
          if [ -f whatsnew.txt ]; then
            whatsNew=$(cat whatsnew.txt)
            echo "whatsNew<<EOF" >> $GITHUB_ENV
            echo "$whatsNew" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Error: 'whatsnew.txt' not found!"
            exit 1
          fi

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a v${{ env.version }} -m "Release v${{ env.version }}"
          git push origin v${{ env.version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Web-${{ env.version }}
          path: webdeploy

      - name: Download Android APK artifact
        uses: actions/download-artifact@v4
        with:
          name: MangaBox-Android-${{ env.version }}
          path: android

      - name: List release contents
        run: |
          echo "== dist =="
          ls -lR dist/
          echo "== webdeploy =="
          ls -lR webdeploy/
          echo "== android =="
          ls -lR android/

      - name: Zip web folder
        run: |
          cd webdeploy
          zip -r MangaBox-${{ env.version }}-Web.zip mangabox

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            dist/*/*
            webdeploy/MangaBox-${{ env.version }}-Web.zip
          body: ${{ env.whatsNew }}
          token: ${{ secrets.GITHUB_TOKEN }}

